name: Automated Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
#  cargo_build:
#    strategy:
#      matrix:
#        include:
#          - build: windows-i686
#            os: windows-latest
#            target: i686-pc-windows-msvc
#            msvc_arch: amd64_x86
#          - build: windows-x86_64
#            os: windows-latest
#            target: x86_64-pc-windows-msvc
#            msvc_arch: amd64
#          - build: windows-aarch64
#            os: windows-latest
#            target: aarch64-pc-windows-msvc
#            msvc_arch: amd64_arm64
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v4
#      - if: runner.os == 'Windows'
#        uses: ilammy/msvc-dev-cmd@v1
#        with:
#          arch: ${{ matrix.msvc_arch }}
#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: stable
#      - uses: Swatinem/rust-cache@v2
#      - run: rustup target add ${{ matrix.target }}
#      - run: cargo build --release --target ${{ matrix.target }}
#      - name: Upload a Build Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: CI builds (${{ matrix.build }})
#          path: |
#            target/**/ornithe-installer-rs*
#            !target/**/ornithe-installer-rs.d
#            !target/**/build/
  cargo_cross_build:
    strategy:
      matrix:
        include:
          - build: macos-universal
            target: aarch64-apple-darwin
            build_target: universal2-apple-darwin
          - build: linux-x86_64
            target: x86_64-unknown-linux-gnu
            build_target: x86_64-unknown-linux-gnu
            arch: amd64
          - build: linux-i686
            target: i686-unknown-linux-gnu
            build_target: i686-unknown-linux-gnu
            arch: i386
          - build: linux-aarch64
            target: aarch64-unknown-linux-gnu
            build_target: aarch64-unknown-linux-gnu
            arch: arm64
    runs-on: ubuntu-latest
    container: ghcr.io/rust-cross/cargo-zigbuild:0.20
    steps:
      - uses: actions/checkout@v4
      - if: matrix.build != 'macos-universal'
        run: dpkg --add-architecture ${{ matrix.arch }} && apt-get clean && apt-get update
      - if: matrix.build != 'macos-universal'
        run: apt-get -yq --allow-unauthenticated --no-install-suggests --no-install-recommends install libxcb-render0-dev:${{ matrix.arch }} libxcb-shape0-dev:${{ matrix.arch }} libxcb-xfixes0-dev:${{ matrix.arch }} libxkbcommon-dev:${{ matrix.arch }} libssl-dev:${{ matrix.arch }} pkg-config:${{ matrix.arch }} libgtk-3-dev:${{ matrix.arch }} # libgtk-3-dev is used by rfd
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup target add ${{ matrix.target }}
      - run: rustup target add x86_64-apple-darwin
        if: matrix.build == 'macos-universal'
      - run: cargo zigbuild --release --target ${{ matrix.build_target }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CI builds (${{ matrix.build }})
          path: |
            target/**/ornithe-installer-rs*
            !target/**/ornithe-installer-rs.d
            !target/**/build/
#  build:
#    strategy:
#      matrix:
#        build: [linux, windows, mac]
#        include:
#          - build: linux
#            os: ubuntu-latest
#            rust: "stable"
#          - build: windows
#            os: windows-latest
#            rust: "stable"
#          - build: mac
#            os: macos-latest
#            rust: "stable"
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Install packages (Linux)
#        if: runner.os == 'Linux'
#        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
#        with:
#          packages: libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev libgtk-3-dev # libgtk-3-dev is used by rfd
#          version: 1.0
#          execute_install_scripts: true
#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: ${{ matrix.rust }}
#      - uses: Swatinem/rust-cache@v2
#      - name: Build
#        run: cargo build --verbose
#      - name: Build release binary
#        run: cargo build --release
#      - name: Upload a Build Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: CI builds (${{ matrix.build }})
#          path: |
#            target/**/ornithe-installer-rs*
#            !target/**/ornithe-installer-rs.d
#            !target/**/build/
