name: Automated Build

on:
  push:
    branches: ["main", "test"]
  pull_request:
    branches: ["main"]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - build: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            package_arch: amd64
            extra_package: ''
          - build: linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            package_arch: arm64
            extra_package: gcc-aarch64-linux-gnu libc6-dev-arm64-cross g++-aarch64-linux-gnu
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup package architecture (Linux)
        if: runner.os == 'Linux' && matrix.package_arch != 'amd64'
        run: |
          touch ports.sources
          echo "Types: deb" >> ports.sources
          echo "URIs: https://ports.ubuntu.com/ubuntu-ports/" >> ports.sources
          echo "Suites: noble noble-updates noble-security" >> ports.sources
          echo "Components: main restricted universe multiverse" >> ports.sources
          echo "Architectures: ${{matrix.package_arch}}" >> ports.sources
          echo "Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg" >> ports.sources
          sudo mv ports.sources /etc/apt/sources.list.d/ports.sources
          sudo dpkg --add-architecture ${{ matrix.package_arch }}
          sudo apt-get clean && sudo apt-get update
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libxcb-render0-dev:${{ matrix.package_arch }} libxcb-shape0-dev:${{ matrix.package_arch }} libxcb-xfixes0-dev:${{ matrix.package_arch }} libxkbcommon-dev:${{ matrix.package_arch }} libssl-dev:${{ matrix.package_arch }} libgtk-3-dev:${{ matrix.package_arch }} ${{ matrix.extra_package }} # libgtk-3-dev is used by rfd
          version: 1.0
          execute_install_scripts: true
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup target add ${{ matrix.target }}
      - run: cargo build --release --target ${{ matrix.target }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CI builds (${{ matrix.build }})
          path: |
            target/**/ornithe-installer-rs*
            !target/**/ornithe-installer-rs.d
            !target/**/build/
